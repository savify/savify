// <auto-generated />
using System;
using System.Collections.Generic;
using App.Modules.Banks.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace App.Modules.Banks.Infrastructure.Migrations
{
    [DbContext(typeof(BanksContext))]
    partial class BanksContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("banks")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("App.BuildingBlocks.Infrastructure.Inbox.InboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_inbox_messages");

                    b.ToTable("inbox_messages", "banks");
                });

            modelBuilder.Entity("App.BuildingBlocks.Infrastructure.InternalCommands.InternalCommand", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<DateTime>("EnqueueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enqueue_date");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_internal_commands");

                    b.ToTable("internal_commands", "banks");
                });

            modelBuilder.Entity("App.BuildingBlocks.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.ToTable("outbox_messages", "banks");
                });

            modelBuilder.Entity("App.Modules.Banks.Domain.Banks.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CurrentRevisionId")
                        .HasColumnType("uuid")
                        .HasColumnName("current_revision_id");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("external_id");

                    b.Property<Guid>("LastBanksSynchronisationProcessId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_banks_synchronisation_process_id");

                    b.Property<DateTime>("_createdAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("_defaultLogoUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("default_logo_url");

                    b.Property<bool>("_isRegulated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_regulated");

                    b.Property<string>("_logoUrl")
                        .HasColumnType("text")
                        .HasColumnName("logo_url");

                    b.Property<int?>("_maxConsentDays")
                        .HasColumnType("integer")
                        .HasColumnName("max_consent_days");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("_updatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("_country", "App.Modules.Banks.Domain.Banks.Bank._country#Country", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("country_code");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("_externalProviderName", "App.Modules.Banks.Domain.Banks.Bank._externalProviderName#ExternalProviderName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("external_provider_name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("_status", "App.Modules.Banks.Domain.Banks.Bank._status#BankStatus", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("status");
                        });

                    b.HasKey("Id")
                        .HasName("pk_banks");

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasDatabaseName("ix_banks_external_id");

                    b.ToTable("banks", "banks");
                });

            modelBuilder.Entity("App.Modules.Banks.Domain.Banks.BankRevisions.BankRevision", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uuid")
                        .HasColumnName("bank_id");

                    b.Property<DateTime>("_createdAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("_defaultLogoUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("default_logo_url");

                    b.Property<bool>("_isRegulated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_regulated");

                    b.Property<string>("_logoUrl")
                        .HasColumnType("text")
                        .HasColumnName("logo_url");

                    b.Property<int?>("_maxConsentDays")
                        .HasColumnType("integer")
                        .HasColumnName("max_consent_days");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.ComplexProperty<Dictionary<string, object>>("_revisionType", "App.Modules.Banks.Domain.Banks.BankRevisions.BankRevision._revisionType#BankRevisionType", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("revision_type");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("_status", "App.Modules.Banks.Domain.Banks.BankRevisions.BankRevision._status#BankStatus", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("status");
                        });

                    b.HasKey("Id", "BankId")
                        .HasName("pk_bank_revisions");

                    b.ToTable("bank_revisions", "banks");
                });

            modelBuilder.Entity("App.Modules.Banks.Domain.BanksSynchronisationProcessing.BanksSynchronisationProcess", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("_finishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished_at");

                    b.Property<DateTime>("_startedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.ComplexProperty<Dictionary<string, object>>("_status", "App.Modules.Banks.Domain.BanksSynchronisationProcessing.BanksSynchronisationProcess._status#BanksSynchronisationProcessStatus", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("status");
                        });

                    b.HasKey("Id")
                        .HasName("pk_banks_synchronisation_processes");

                    b.ToTable("banks_synchronisation_processes", "banks");
                });

            modelBuilder.Entity("App.Modules.Banks.Domain.Banks.BankRevisions.BankRevision", b =>
                {
                    b.OwnsOne("App.Modules.Banks.Domain.Banks.BankRevisions.BankRevisionCreator", "_createdBy", b1 =>
                        {
                            b1.Property<Guid>("BankRevisionId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("BankRevisionBankId")
                                .HasColumnType("uuid")
                                .HasColumnName("bank_id");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("created_by_id");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("created_by_type");

                            b1.HasKey("BankRevisionId", "BankRevisionBankId");

                            b1.ToTable("bank_revisions", "banks");

                            b1.WithOwner()
                                .HasForeignKey("BankRevisionId", "BankRevisionBankId")
                                .HasConstraintName("fk_bank_revisions_bank_revisions_id_bank_id");
                        });

                    b.Navigation("_createdBy");
                });

            modelBuilder.Entity("App.Modules.Banks.Domain.BanksSynchronisationProcessing.BanksSynchronisationProcess", b =>
                {
                    b.OwnsOne("App.Modules.Banks.Domain.BanksSynchronisationProcessing.BanksSynchronisationProcessInitiator", "_initiatedBy", b1 =>
                        {
                            b1.Property<Guid>("BanksSynchronisationProcessId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid?>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("initiated_by_user_id");

                            b1.HasKey("BanksSynchronisationProcessId");

                            b1.ToTable("banks_synchronisation_processes", "banks");

                            b1.WithOwner()
                                .HasForeignKey("BanksSynchronisationProcessId")
                                .HasConstraintName("fk_banks_synchronisation_processes_banks_synchronisation_proce");

                            b1.OwnsOne("App.Modules.Banks.Domain.BanksSynchronisationProcessing.BanksSynchronisationProcessInitiatorType", "Type", b2 =>
                                {
                                    b2.Property<Guid>("BanksSynchronisationProcessInitiatorBanksSynchronisationProcessId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("id");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("initiated_by_type");

                                    b2.HasKey("BanksSynchronisationProcessInitiatorBanksSynchronisationProcessId");

                                    b2.ToTable("banks_synchronisation_processes", "banks");

                                    b2.WithOwner()
                                        .HasForeignKey("BanksSynchronisationProcessInitiatorBanksSynchronisationProcessId")
                                        .HasConstraintName("fk_banks_synchronisation_processes_banks_synchronisation_proce");
                                });

                            b1.Navigation("Type")
                                .IsRequired();
                        });

                    b.Navigation("_initiatedBy")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
