// <auto-generated />
using System;
using App.Modules.Banks.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace App.Modules.Banks.Infrastructure.Migrations
{
    [DbContext(typeof(BanksContext))]
    [Migration("20230913091717_RemoveOwnsOneForVO")]
    partial class RemoveOwnsOneForVO
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("App.BuildingBlocks.Application.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("outbox_messages", "banks");
                });

            modelBuilder.Entity("App.BuildingBlocks.Infrastructure.Inbox.InboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("inbox_messages", "banks");
                });

            modelBuilder.Entity("App.BuildingBlocks.Infrastructure.InternalCommands.InternalCommand", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<DateTime>("EnqueueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enqueue_date");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("internal_commands", "banks");
                });

            modelBuilder.Entity("App.Modules.Banks.Domain.Banks.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("external_id");

                    b.Property<Guid>("LastBanksSynchronisationProcessId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_banks_synchronisation_process_id");

                    b.Property<string>("_country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country_code");

                    b.Property<DateTime>("_createdAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("_defaultLogoUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("default_logo_url");

                    b.Property<string>("_externalProviderName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("external_provider_name");

                    b.Property<bool>("_isRegulated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_regulated");

                    b.Property<string>("_logoUrl")
                        .HasColumnType("text")
                        .HasColumnName("logo_url");

                    b.Property<int?>("_maxConsentDays")
                        .HasColumnType("integer")
                        .HasColumnName("max_consent_days");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("_status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime?>("_updatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("banks", "banks");
                });

            modelBuilder.Entity("App.Modules.Banks.Domain.BanksSynchronisationProcessing.BanksSynchronisationProcess", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("_finishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished_at");

                    b.Property<DateTime>("_startedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.HasKey("Id");

                    b.ToTable("banks_synchronisation_processes", "banks");
                });

            modelBuilder.Entity("App.Modules.Banks.Domain.BanksSynchronisationProcessing.BanksSynchronisationProcess", b =>
                {
                    b.OwnsOne("App.Modules.Banks.Domain.BanksSynchronisationProcessing.BanksSynchronisationProcessInitiator", "_initiatedBy", b1 =>
                        {
                            b1.Property<Guid>("BanksSynchronisationProcessId")
                                .HasColumnType("uuid");

                            b1.Property<Guid?>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("initiated_by_user_id");

                            b1.HasKey("BanksSynchronisationProcessId");

                            b1.ToTable("banks_synchronisation_processes", "banks");

                            b1.WithOwner()
                                .HasForeignKey("BanksSynchronisationProcessId");

                            b1.OwnsOne("App.Modules.Banks.Domain.BanksSynchronisationProcessing.BanksSynchronisationProcessInitiatorType", "Type", b2 =>
                                {
                                    b2.Property<Guid>("BanksSynchronisationProcessInitiatorBanksSynchronisationProcessId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("initiated_by_type");

                                    b2.HasKey("BanksSynchronisationProcessInitiatorBanksSynchronisationProcessId");

                                    b2.ToTable("banks_synchronisation_processes", "banks");

                                    b2.WithOwner()
                                        .HasForeignKey("BanksSynchronisationProcessInitiatorBanksSynchronisationProcessId");
                                });

                            b1.Navigation("Type")
                                .IsRequired();
                        });

                    b.OwnsOne("App.Modules.Banks.Domain.BanksSynchronisationProcessing.BanksSynchronisationProcessStatus", "_status", b1 =>
                        {
                            b1.Property<Guid>("BanksSynchronisationProcessId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("status");

                            b1.HasKey("BanksSynchronisationProcessId");

                            b1.ToTable("banks_synchronisation_processes", "banks");

                            b1.WithOwner()
                                .HasForeignKey("BanksSynchronisationProcessId");
                        });

                    b.Navigation("_initiatedBy")
                        .IsRequired();

                    b.Navigation("_status");
                });
#pragma warning restore 612, 618
        }
    }
}
