// <auto-generated />
using System;
using App.Modules.Transactions.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace App.Modules.Transactions.Infrastructure.Migrations
{
    [DbContext(typeof(TransactionsContext))]
    partial class TransactionsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("App.BuildingBlocks.Application.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("outbox_messages", "transactions");
                });

            modelBuilder.Entity("App.BuildingBlocks.Infrastructure.Inbox.InboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("inbox_messages", "transactions");
                });

            modelBuilder.Entity("App.BuildingBlocks.Infrastructure.InternalCommands.InternalCommand", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<DateTime>("EnqueueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enqueue_date");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("internal_commands", "transactions");
                });

            modelBuilder.Entity("App.Modules.Transactions.Domain.Transactions.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("_comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("_madeOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("made_on");

                    b.Property<string>("_tags")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<string>("_type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("transactions", "transactions");
                });

            modelBuilder.Entity("App.Modules.Transactions.Domain.Transactions.Transaction", b =>
                {
                    b.OwnsOne("App.Modules.Transactions.Domain.Transactions.Transaction._source#App.Modules.Transactions.Domain.Transactions.Source", "_source", b1 =>
                        {
                            b1.Property<Guid>("transaction_id")
                                .HasColumnType("uuid");

                            b1.HasKey("transaction_id");

                            b1.ToTable("transaction_sources", "transactions");

                            b1.WithOwner()
                                .HasForeignKey("transaction_id");

                            b1.OwnsOne("App.Modules.Transactions.Domain.Transactions.Transaction._source#App.Modules.Transactions.Domain.Transactions.Source.Amount#App.Modules.Transactions.Domain.Finance.Money", "Amount", b2 =>
                                {
                                    b2.Property<Guid>("Sourcetransaction_id")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Amount")
                                        .HasColumnType("integer")
                                        .HasColumnName("amount");

                                    b2.HasKey("Sourcetransaction_id");

                                    b2.ToTable("transaction_sources", "transactions");

                                    b2.WithOwner()
                                        .HasForeignKey("Sourcetransaction_id");

                                    b2.OwnsOne("App.Modules.Transactions.Domain.Transactions.Transaction._source#App.Modules.Transactions.Domain.Transactions.Source.Amount#App.Modules.Transactions.Domain.Finance.Money.Currency#App.Modules.Transactions.Domain.Finance.Currency", "Currency", b3 =>
                                        {
                                            b3.Property<Guid>("MoneySourcetransaction_id")
                                                .HasColumnType("uuid");

                                            b3.Property<string>("Value")
                                                .IsRequired()
                                                .HasColumnType("text")
                                                .HasColumnName("amount_currency");

                                            b3.HasKey("MoneySourcetransaction_id");

                                            b3.ToTable("transaction_sources", "transactions");

                                            b3.WithOwner()
                                                .HasForeignKey("MoneySourcetransaction_id");
                                        });

                                    b2.Navigation("Currency")
                                        .IsRequired();
                                });

                            b1.OwnsOne("App.Modules.Transactions.Domain.Transactions.Transaction._source#App.Modules.Transactions.Domain.Transactions.Source.Sender#App.Modules.Transactions.Domain.Transactions.Sender", "Sender", b2 =>
                                {
                                    b2.Property<Guid>("Sourcetransaction_id")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Address")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("sender_address");

                                    b2.HasKey("Sourcetransaction_id");

                                    b2.ToTable("transaction_sources", "transactions");

                                    b2.WithOwner()
                                        .HasForeignKey("Sourcetransaction_id");
                                });

                            b1.Navigation("Amount")
                                .IsRequired();

                            b1.Navigation("Sender")
                                .IsRequired();
                        });

                    b.OwnsOne("App.Modules.Transactions.Domain.Transactions.Transaction._target#App.Modules.Transactions.Domain.Transactions.Target", "_target", b1 =>
                        {
                            b1.Property<Guid>("transaction_id")
                                .HasColumnType("uuid");

                            b1.HasKey("transaction_id");

                            b1.ToTable("transaction_targets", "transactions");

                            b1.WithOwner()
                                .HasForeignKey("transaction_id");

                            b1.OwnsOne("App.Modules.Transactions.Domain.Transactions.Transaction._target#App.Modules.Transactions.Domain.Transactions.Target.Amount#App.Modules.Transactions.Domain.Finance.Money", "Amount", b2 =>
                                {
                                    b2.Property<Guid>("Targettransaction_id")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Amount")
                                        .HasColumnType("integer")
                                        .HasColumnName("amount");

                                    b2.HasKey("Targettransaction_id");

                                    b2.ToTable("transaction_targets", "transactions");

                                    b2.WithOwner()
                                        .HasForeignKey("Targettransaction_id");

                                    b2.OwnsOne("App.Modules.Transactions.Domain.Transactions.Transaction._target#App.Modules.Transactions.Domain.Transactions.Target.Amount#App.Modules.Transactions.Domain.Finance.Money.Currency#App.Modules.Transactions.Domain.Finance.Currency", "Currency", b3 =>
                                        {
                                            b3.Property<Guid>("MoneyTargettransaction_id")
                                                .HasColumnType("uuid");

                                            b3.Property<string>("Value")
                                                .IsRequired()
                                                .HasColumnType("text")
                                                .HasColumnName("amount_currency");

                                            b3.HasKey("MoneyTargettransaction_id");

                                            b3.ToTable("transaction_targets", "transactions");

                                            b3.WithOwner()
                                                .HasForeignKey("MoneyTargettransaction_id");
                                        });

                                    b2.Navigation("Currency")
                                        .IsRequired();
                                });

                            b1.OwnsOne("App.Modules.Transactions.Domain.Transactions.Transaction._target#App.Modules.Transactions.Domain.Transactions.Target.Recipient#App.Modules.Transactions.Domain.Transactions.Recipient", "Recipient", b2 =>
                                {
                                    b2.Property<Guid>("Targettransaction_id")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Address")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("recipient_address");

                                    b2.HasKey("Targettransaction_id");

                                    b2.ToTable("transaction_targets", "transactions");

                                    b2.WithOwner()
                                        .HasForeignKey("Targettransaction_id");
                                });

                            b1.Navigation("Amount")
                                .IsRequired();

                            b1.Navigation("Recipient")
                                .IsRequired();
                        });

                    b.Navigation("_source");

                    b.Navigation("_target");
                });
#pragma warning restore 612, 618
        }
    }
}
