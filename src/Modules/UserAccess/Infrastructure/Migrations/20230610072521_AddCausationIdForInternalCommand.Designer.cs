// <auto-generated />
using System;
using App.Modules.UserAccess.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace App.Modules.UserAccess.Infrastructure.Migrations
{
    [DbContext(typeof(UserAccessContext))]
    [Migration("20230610072521_AddCausationIdForInternalCommand")]
    partial class AddCausationIdForInternalCommand
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("App.BuildingBlocks.Application.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("outbox_messages", "user_access");
                });

            modelBuilder.Entity("App.BuildingBlocks.Infrastructure.Inbox.InboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("inbox_messages", "user_access");
                });

            modelBuilder.Entity("App.BuildingBlocks.Infrastructure.InternalCommands.InternalCommand", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CausationId")
                        .HasColumnType("uuid")
                        .HasColumnName("causation_id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<DateTime>("EnqueueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enqueue_date");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("internal_commands", "user_access");
                });

            modelBuilder.Entity("App.Modules.UserAccess.Domain.PasswordResetRequest.PasswordResetRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("_confirmedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("confirmed_at");

                    b.Property<DateTime>("_createdAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("_userEmail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_email");

                    b.Property<DateTime>("_validTill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_till");

                    b.HasKey("Id");

                    b.ToTable("password_reset_requests", "user_access");
                });

            modelBuilder.Entity("App.Modules.UserAccess.Domain.UserRegistrations.UserRegistration", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("_confirmedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("confirmed_at");

                    b.Property<DateTime>("_createdAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("_email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("_password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<DateTime>("_validTill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_till");

                    b.HasKey("Id");

                    b.ToTable("user_registrations", "user_access");
                });

            modelBuilder.Entity("App.Modules.UserAccess.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("_createdAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("_email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("_isActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("_password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.ToTable("users", "user_access");
                });

            modelBuilder.Entity("App.Modules.UserAccess.Domain.PasswordResetRequest.PasswordResetRequest", b =>
                {
                    b.OwnsOne("App.Modules.UserAccess.Domain.ConfirmationCode", "_confirmationCode", b1 =>
                        {
                            b1.Property<Guid>("PasswordResetRequestId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("confirmation_code");

                            b1.HasKey("PasswordResetRequestId");

                            b1.ToTable("password_reset_requests", "user_access");

                            b1.WithOwner()
                                .HasForeignKey("PasswordResetRequestId");
                        });

                    b.OwnsOne("App.Modules.UserAccess.Domain.PasswordResetRequest.PasswordResetRequestStatus", "_status", b1 =>
                        {
                            b1.Property<Guid>("PasswordResetRequestId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("status");

                            b1.HasKey("PasswordResetRequestId");

                            b1.ToTable("password_reset_requests", "user_access");

                            b1.WithOwner()
                                .HasForeignKey("PasswordResetRequestId");
                        });

                    b.Navigation("_confirmationCode");

                    b.Navigation("_status");
                });

            modelBuilder.Entity("App.Modules.UserAccess.Domain.UserRegistrations.UserRegistration", b =>
                {
                    b.OwnsOne("App.Modules.UserAccess.Domain.ConfirmationCode", "_confirmationCode", b1 =>
                        {
                            b1.Property<Guid>("UserRegistrationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("confirmation_code");

                            b1.HasKey("UserRegistrationId");

                            b1.ToTable("user_registrations", "user_access");

                            b1.WithOwner()
                                .HasForeignKey("UserRegistrationId");
                        });

                    b.OwnsOne("App.Modules.UserAccess.Domain.Users.Language", "_preferredLanguage", b1 =>
                        {
                            b1.Property<Guid>("UserRegistrationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("preferred_language");

                            b1.HasKey("UserRegistrationId");

                            b1.ToTable("user_registrations", "user_access");

                            b1.WithOwner()
                                .HasForeignKey("UserRegistrationId");
                        });

                    b.OwnsOne("App.Modules.UserAccess.Domain.UserRegistrations.UserRegistrationStatus", "_status", b1 =>
                        {
                            b1.Property<Guid>("UserRegistrationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("status");

                            b1.HasKey("UserRegistrationId");

                            b1.ToTable("user_registrations", "user_access");

                            b1.WithOwner()
                                .HasForeignKey("UserRegistrationId");
                        });

                    b.Navigation("_confirmationCode");

                    b.Navigation("_preferredLanguage");

                    b.Navigation("_status");
                });

            modelBuilder.Entity("App.Modules.UserAccess.Domain.Users.User", b =>
                {
                    b.OwnsOne("App.Modules.UserAccess.Domain.Users.Language", "_preferredLanguage", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("preferred_language");

                            b1.HasKey("UserId");

                            b1.ToTable("users", "user_access");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsMany("App.Modules.UserAccess.Domain.Users.UserRole", "_roles", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("user_id");

                            b1.Property<string>("Value")
                                .HasColumnType("text")
                                .HasColumnName("role_code");

                            b1.HasKey("UserId", "Value");

                            b1.ToTable("user_roles", "user_access");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("_preferredLanguage");

                    b.Navigation("_roles");
                });
#pragma warning restore 612, 618
        }
    }
}
