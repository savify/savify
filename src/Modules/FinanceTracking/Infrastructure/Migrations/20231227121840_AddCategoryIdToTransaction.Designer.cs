// <auto-generated />
using System;
using System.Collections.Generic;
using App.Modules.FinanceTracking.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace App.Modules.FinanceTracking.Infrastructure.Migrations
{
    [DbContext(typeof(FinanceTrackingContext))]
    [Migration("20231227121840_AddCategoryIdToTransaction")]
    partial class AddCategoryIdToTransaction
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("finance_tracking")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("App.BuildingBlocks.Infrastructure.Inbox.InboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_inbox_messages");

                    b.ToTable("inbox_messages", "finance_tracking");
                });

            modelBuilder.Entity("App.BuildingBlocks.Infrastructure.InternalCommands.InternalCommand", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<DateTime>("EnqueueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enqueue_date");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_internal_commands");

                    b.ToTable("internal_commands", "finance_tracking");
                });

            modelBuilder.Entity("App.BuildingBlocks.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.ToTable("outbox_messages", "finance_tracking");
                });

            modelBuilder.Entity("App.Modules.FinanceTracking.Domain.BankConnectionProcessing.BankConnectionProcess", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uuid")
                        .HasColumnName("bank_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid")
                        .HasColumnName("wallet_id");

                    b.Property<DateTime>("_initiatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("initiated_at");

                    b.Property<string>("_redirectUrl")
                        .HasColumnType("text")
                        .HasColumnName("redirect_url");

                    b.Property<DateTime?>("_redirectUrlExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("redirect_url_expires_at");

                    b.Property<DateTime?>("_updatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("_status", "App.Modules.FinanceTracking.Domain.BankConnectionProcessing.BankConnectionProcess._status#BankConnectionProcessStatus", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("status");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("_walletType", "App.Modules.FinanceTracking.Domain.BankConnectionProcessing.BankConnectionProcess._walletType#WalletType", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("wallet_type");
                        });

                    b.HasKey("Id")
                        .HasName("pk_bank_connection_processes");

                    b.ToTable("bank_connection_processes", "finance_tracking");
                });

            modelBuilder.Entity("App.Modules.FinanceTracking.Domain.BankConnections.BankConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("_bankId")
                        .HasColumnType("uuid")
                        .HasColumnName("bank_id");

                    b.Property<DateTime>("_createdAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("_refreshedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refreshed_at");

                    b.Property<Guid>("_userId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.ComplexProperty<Dictionary<string, object>>("_consent", "App.Modules.FinanceTracking.Domain.BankConnections.BankConnection._consent#Consent", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("ExpiresAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("consent_expires_at");
                        });

                    b.HasKey("Id")
                        .HasName("pk_bank_connections");

                    b.ToTable("bank_connections", "finance_tracking");
                });

            modelBuilder.Entity("App.Modules.FinanceTracking.Domain.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("external_id");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", "finance_tracking");
                });

            modelBuilder.Entity("App.Modules.FinanceTracking.Domain.Portfolios.InvestmentPortfolios.InvestmentPortfolio", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("_title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_investment_portfolios");

                    b.ToTable("investment_portfolios", "finance_tracking");
                });

            modelBuilder.Entity("App.Modules.FinanceTracking.Domain.Portfolios.PortfolioViewMetadata.PortfolioViewMetadata", b =>
                {
                    b.Property<Guid>("PortfolioId")
                        .HasColumnType("uuid")
                        .HasColumnName("portfolio_id");

                    b.Property<string>("Color")
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<bool>("IsConsideredInTotalBalance")
                        .HasColumnType("boolean")
                        .HasColumnName("is_considered_in_total_balance");

                    b.HasKey("PortfolioId")
                        .HasName("pk_portfolio_view_metadata");

                    b.ToTable("portfolio_view_metadata", "finance_tracking");
                });

            modelBuilder.Entity("App.Modules.FinanceTracking.Domain.Transfers.Transfer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("_categoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("_comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("_madeOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("made_on");

                    b.Property<Guid>("_sourceWalletId")
                        .HasColumnType("uuid")
                        .HasColumnName("source_wallet_id");

                    b.Property<string[]>("_tags")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<Guid>("_targetWalletId")
                        .HasColumnType("uuid")
                        .HasColumnName("target_wallet_id");

                    b.HasKey("Id")
                        .HasName("pk_transfers");

                    b.ToTable("transfers", "finance_tracking");
                });

            modelBuilder.Entity("App.Modules.FinanceTracking.Domain.Wallets.CashWallets.CashWallet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("_balance")
                        .HasColumnType("integer")
                        .HasColumnName("balance");

                    b.Property<DateTime>("_createdAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("_isRemoved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_removed");

                    b.Property<DateTime?>("_removedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("removed_at");

                    b.Property<string>("_title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("_updatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_cash_wallets");

                    b.ToTable("cash_wallets", "finance_tracking");
                });

            modelBuilder.Entity("App.Modules.FinanceTracking.Domain.Wallets.CreditWallets.CreditWallet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("_availableBalance")
                        .HasColumnType("integer")
                        .HasColumnName("available_balance");

                    b.Property<DateTime>("_createdAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("_creditLimit")
                        .HasColumnType("integer")
                        .HasColumnName("credit_limit");

                    b.Property<bool>("_isRemoved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_removed");

                    b.Property<DateTime?>("_removedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("removed_at");

                    b.Property<string>("_title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("_updatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_credit_wallets");

                    b.ToTable("credit_wallets", "finance_tracking");
                });

            modelBuilder.Entity("App.Modules.FinanceTracking.Domain.Wallets.DebitWallets.DebitWallet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("_balance")
                        .HasColumnType("integer")
                        .HasColumnName("balance");

                    b.Property<DateTime>("_createdAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("_isRemoved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_removed");

                    b.Property<DateTime?>("_removedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("removed_at");

                    b.Property<string>("_title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("_updatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_debit_wallets");

                    b.ToTable("debit_wallets", "finance_tracking");
                });

            modelBuilder.Entity("App.Modules.FinanceTracking.Domain.Wallets.WalletViewMetadata.WalletViewMetadata", b =>
                {
                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid")
                        .HasColumnName("wallet_id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<bool>("IsConsideredInTotalBalance")
                        .HasColumnType("boolean")
                        .HasColumnName("is_considered_in_total_balance");

                    b.HasKey("WalletId")
                        .HasName("pk_wallet_view_metadata");

                    b.ToTable("wallet_view_metadata", "finance_tracking");
                });

            modelBuilder.Entity("App.Modules.FinanceTracking.Infrastructure.Integrations.SaltEdge.Connections.SaltEdgeConnection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country_code");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("customer_id");

                    b.Property<Guid>("InternalConnectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("internal_connection_id");

                    b.Property<string>("LastConsentId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_consent_id");

                    b.Property<string>("ProviderCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider_code");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_salt_edge_connections");

                    b.ToTable("salt_edge_connections", "finance_tracking");
                });

            modelBuilder.Entity("App.Modules.FinanceTracking.Infrastructure.Integrations.SaltEdge.Customers.SaltEdgeCustomer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<Guid>("Identifier")
                        .HasColumnType("uuid")
                        .HasColumnName("identifier");

                    b.HasKey("Id")
                        .HasName("pk_salt_edge_customers");

                    b.ToTable("salt_edge_customers", "finance_tracking");
                });

            modelBuilder.Entity("App.Modules.FinanceTracking.Domain.BankConnections.BankConnection", b =>
                {
                    b.OwnsMany("App.Modules.FinanceTracking.Domain.BankConnections.BankAccounts.BankAccount", "_accounts", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("BankConnectionId")
                                .HasColumnType("uuid")
                                .HasColumnName("bank_connection_id");

                            b1.Property<int>("Balance")
                                .HasColumnType("integer")
                                .HasColumnName("balance");

                            b1.Property<string>("_externalId")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("external_id");

                            b1.Property<string>("_name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");

                            b1.HasKey("Id", "BankConnectionId")
                                .HasName("pk_bank_accounts");

                            b1.HasIndex("BankConnectionId")
                                .HasDatabaseName("ix_bank_accounts_bank_connection_id");

                            b1.ToTable("bank_accounts", "finance_tracking");

                            b1.WithOwner()
                                .HasForeignKey("BankConnectionId")
                                .HasConstraintName("fk_bank_accounts_bank_connections_bank_connection_id");

                            b1.OwnsOne("App.Modules.FinanceTracking.Domain.Finance.Currency", "Currency", b2 =>
                                {
                                    b2.Property<Guid>("BankAccountId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("id");

                                    b2.Property<Guid>("BankAccountBankConnectionId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("bank_connection_id");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("currency");

                                    b2.HasKey("BankAccountId", "BankAccountBankConnectionId");

                                    b2.ToTable("bank_accounts", "finance_tracking");

                                    b2.WithOwner()
                                        .HasForeignKey("BankAccountId", "BankAccountBankConnectionId")
                                        .HasConstraintName("fk_bank_accounts_bank_accounts_id_bank_connection_id");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();
                        });

                    b.Navigation("_accounts");
                });

            modelBuilder.Entity("App.Modules.FinanceTracking.Domain.Portfolios.InvestmentPortfolios.InvestmentPortfolio", b =>
                {
                    b.OwnsMany("App.Modules.FinanceTracking.Domain.Portfolios.InvestmentPortfolios.Assets.Asset", "_assets", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("_amount")
                                .HasColumnType("numeric")
                                .HasColumnName("amount");

                            b1.Property<string>("_country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("country");

                            b1.Property<string>("_exchange")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("exchange");

                            b1.Property<DateTime?>("_purchasedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("purchased_at");

                            b1.Property<string>("_tickerSymbol")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ticker_symbol");

                            b1.Property<string>("_title")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("title");

                            b1.Property<Guid>("investment_portfolio_id")
                                .HasColumnType("uuid")
                                .HasColumnName("investment_portfolio_id");

                            b1.HasKey("Id")
                                .HasName("pk_investment_portfolio_assets");

                            b1.HasIndex("investment_portfolio_id")
                                .HasDatabaseName("ix_investment_portfolio_assets_investment_portfolio_id");

                            b1.ToTable("investment_portfolio_assets", "finance_tracking");

                            b1.WithOwner()
                                .HasForeignKey("investment_portfolio_id")
                                .HasConstraintName("fk_investment_portfolio_assets_investment_portfolios_investmen");

                            b1.OwnsOne("App.Modules.FinanceTracking.Domain.Finance.Money", "_purchasePrice", b2 =>
                                {
                                    b2.Property<Guid>("AssetId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("id");

                                    b2.Property<int>("Amount")
                                        .HasColumnType("integer")
                                        .HasColumnName("purchase_price_amount");

                                    b2.HasKey("AssetId");

                                    b2.ToTable("investment_portfolio_assets", "finance_tracking");

                                    b2.WithOwner()
                                        .HasForeignKey("AssetId")
                                        .HasConstraintName("fk_investment_portfolio_assets_investment_portfolio_assets_id");

                                    b2.OwnsOne("App.Modules.FinanceTracking.Domain.Finance.Currency", "Currency", b3 =>
                                        {
                                            b3.Property<Guid>("MoneyAssetId")
                                                .HasColumnType("uuid")
                                                .HasColumnName("id");

                                            b3.Property<string>("Value")
                                                .IsRequired()
                                                .HasColumnType("text")
                                                .HasColumnName("purchase_price_currency");

                                            b3.HasKey("MoneyAssetId");

                                            b3.ToTable("investment_portfolio_assets", "finance_tracking");

                                            b3.WithOwner()
                                                .HasForeignKey("MoneyAssetId")
                                                .HasConstraintName("fk_investment_portfolio_assets_investment_portfolio_assets_id");
                                        });

                                    b2.Navigation("Currency")
                                        .IsRequired();
                                });

                            b1.Navigation("_purchasePrice")
                                .IsRequired();
                        });

                    b.Navigation("_assets");
                });

            modelBuilder.Entity("App.Modules.FinanceTracking.Domain.Transfers.Transfer", b =>
                {
                    b.OwnsOne("App.Modules.FinanceTracking.Domain.Finance.Money", "_amount", b1 =>
                        {
                            b1.Property<Guid>("TransferId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Amount")
                                .HasColumnType("integer")
                                .HasColumnName("amount");

                            b1.HasKey("TransferId");

                            b1.ToTable("transfers", "finance_tracking");

                            b1.WithOwner()
                                .HasForeignKey("TransferId")
                                .HasConstraintName("fk_transfers_transfers_id");

                            b1.OwnsOne("App.Modules.FinanceTracking.Domain.Finance.Currency", "Currency", b2 =>
                                {
                                    b2.Property<Guid>("MoneyTransferId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("id");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("currency");

                                    b2.HasKey("MoneyTransferId");

                                    b2.ToTable("transfers", "finance_tracking");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyTransferId")
                                        .HasConstraintName("fk_transfers_transfers_id");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();
                        });

                    b.Navigation("_amount")
                        .IsRequired();
                });

            modelBuilder.Entity("App.Modules.FinanceTracking.Domain.Wallets.CashWallets.CashWallet", b =>
                {
                    b.OwnsOne("App.Modules.FinanceTracking.Domain.Finance.Currency", "_currency", b1 =>
                        {
                            b1.Property<Guid>("CashWalletId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("currency");

                            b1.HasKey("CashWalletId");

                            b1.ToTable("cash_wallets", "finance_tracking");

                            b1.WithOwner()
                                .HasForeignKey("CashWalletId")
                                .HasConstraintName("fk_cash_wallets_cash_wallets_id");
                        });

                    b.Navigation("_currency")
                        .IsRequired();
                });

            modelBuilder.Entity("App.Modules.FinanceTracking.Domain.Wallets.CreditWallets.CreditWallet", b =>
                {
                    b.OwnsOne("App.Modules.FinanceTracking.Domain.Finance.Currency", "_currency", b1 =>
                        {
                            b1.Property<Guid>("CreditWalletId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("currency");

                            b1.HasKey("CreditWalletId");

                            b1.ToTable("credit_wallets", "finance_tracking");

                            b1.WithOwner()
                                .HasForeignKey("CreditWalletId")
                                .HasConstraintName("fk_credit_wallets_credit_wallets_id");
                        });

                    b.Navigation("_currency")
                        .IsRequired();
                });

            modelBuilder.Entity("App.Modules.FinanceTracking.Domain.Wallets.DebitWallets.DebitWallet", b =>
                {
                    b.OwnsOne("App.Modules.FinanceTracking.Domain.Wallets.BankAccountConnections.BankAccountConnection", "_bankAccountConnection", b1 =>
                        {
                            b1.Property<Guid>("DebitWalletId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("BankAccountId")
                                .HasColumnType("uuid")
                                .HasColumnName("bank_account_id");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("bank_connection_id");

                            b1.HasKey("DebitWalletId");

                            b1.ToTable("debit_wallets", "finance_tracking");

                            b1.WithOwner()
                                .HasForeignKey("DebitWalletId")
                                .HasConstraintName("fk_debit_wallets_debit_wallets_id");
                        });

                    b.OwnsOne("App.Modules.FinanceTracking.Domain.Finance.Currency", "_currency", b1 =>
                        {
                            b1.Property<Guid>("DebitWalletId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("currency");

                            b1.HasKey("DebitWalletId");

                            b1.ToTable("debit_wallets", "finance_tracking");

                            b1.WithOwner()
                                .HasForeignKey("DebitWalletId")
                                .HasConstraintName("fk_debit_wallets_debit_wallets_id");
                        });

                    b.Navigation("_bankAccountConnection");

                    b.Navigation("_currency")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
